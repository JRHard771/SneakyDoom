class SensoryMonster : Actor
{
	const SAI_SEE_FLAGS = LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP;
	const SAI_HEAR_FLAGS = LOF_NOSIGHTCHECK|LOF_NOSEESOUND|LOF_NOJUMP;
	
	const AWARE_SEARCH = 5.0;
	const AWARE_ATTACK = 10.0;
	const AWARE_MAX = 15.0;
	const AWARE_LOSS_TIC = (0.5 / TICRATE);

	bool params_init;
	
	double sight_light_mult, sight_mult, hear_mult, aware, seen_x, seen_y,
		sight_max_dist, sight_fov, hear_max_dist, last_aware;
	
	LookExParams look_params;
	
	property SAIParamsInit : params_init;
	property Awareness : aware;
	property Vision : sight_mult, sight_light_mult, sight_max_dist;
	property Hearing : hear_mult, hear_max_dist;
	property FoV : sight_fov;
	
	override void Tick()
	{
		if (health > 0)
		{
			last_aware = aware;
			aware = min(AWARE_MAX, aware);
			if (aware > 0.0)
				aware = max(0.0, aware - AWARE_LOSS_TIC);
			if (aware < AWARE_ATTACK && last_aware >= AWARE_ATTACK)
				SetStateLabel("Search");
		}
		else
			aware = 0.0;

		Super.Tick();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod,
		int flags = 0, double angle = 0)
	{
		aware = 15.0;
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	default
	{
		SensoryMonster.SAIParamsInit true;
		SensoryMonster.Awareness 0.0;
		SensoryMonster.Vision 1.0, 1.0, 2048.0;
		SensoryMonster.Hearing 15.0, 8192.0;
		SensoryMonster.FoV 150.0;
	}
	
	void initLookParams()
	{
		look_params.fov = sight_fov;
		look_params.minDist = 0;
		look_params.maxDist = sight_max_dist;
		look_params.maxHearDist = hear_max_dist;
		look_params.seestate = null;
		params_init = false;
	}
	
	double map(double val, double min1, double max1, double min2, double max2)
	{
		double ratio = (val - min1) / (max1 - min1);
		return ratio * (max2 - min2) + min2;
	}
	
	double exp_curve(double val, double min1, double max1, double min2, double max2)
	{
		double linear = map(val, min1, max1, min2, max2);
		return map(val, min1, max1, min2, linear);
	}
	
	double log_curve(double val, double min1, double max1, double min2, double max2)
	{
		double linear = map(val, min1, max1, min2, max2);
		return map(val, min1, max1, linear, max2);
	}
	
	double distance_mod(double val, double max, bool use_log = false)
	{
		if (use_log)
			return log_curve(val, 0.0, max, 1.0, 0.0);
		else
			return map(val, 0.0, max, 1.0, 0.0);
	}
	
	double light_detect(double light_amt)
	{
		return map(light_amt, 0.0, 256.0, 0.0, 15.0);
	}
	
	void DetectPlayers()
	{
		look_params.flags = SAI_SEE_FLAGS;
		bool see_check = LookForPlayers(false, look_params);
		let see_target = target;

		look_params.flags = SAI_HEAR_FLAGS;
		LookForPlayers(true, look_params);
		let hear_target = target;
		
		if (!target && LastHeard)
			target = LastHeard;

		if (!hear_target && see_target)
			target = see_target;

		if (target)
		{
			double dist = Distance3D(target);
			if (see_check)
			{
				double sight_mod = distance_mod(dist, sight_max_dist) *
					sight_mult;

				double light_mod = light_detect(
					target.cursector.GetLightLevel()) * sight_light_mult;

				aware += sight_mod * light_mod;
			}
			if (LastHeard)
			{
				double hear_mod = distance_mod(dist, hear_max_dist) * hear_mult;
				aware += hear_mod;
				if (aware >= AWARE_SEARCH)
					target = LastHeard;
				A_ClearLastHeard();
			}
		}
	}
	
	action void A_Sense(StateLabel attack = "See")
	{
		if (invoker.params_init)
			invoker.initLookParams();
			
		invoker.DetectPlayers();
		if (invoker.aware >= AWARE_ATTACK)
		{
			if (invoker.last_aware < AWARE_ATTACK)
				invoker.A_PlaySound(invoker.seesound, CHAN_VOICE);
			invoker.SetStateLabel(attack);
		}
		else if (invoker.aware >= AWARE_SEARCH)
			invoker.SetStateLabel("Search");
	}
	
	action void A_Search(StateLabel attack = "See", StateLabel giveup = "Spawn")
	{
		if (invoker.target)
			invoker.A_Chase(null, null, CHF_NORANDOMTURN);
		else
			invoker.A_Wander(CHF_NORANDOMTURN);
			
		invoker.DetectPlayers();
		if (invoker.aware >= AWARE_ATTACK)
		{
			if (invoker.last_aware < AWARE_ATTACK)
				invoker.A_PlaySound(invoker.seesound, CHAN_VOICE);
			invoker.SetStateLabel(attack);
		}
		else if (invoker.aware < AWARE_SEARCH)
			invoker.SetStateLabel(giveup);
	}
}