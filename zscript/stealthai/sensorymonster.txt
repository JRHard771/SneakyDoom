class SensoryMonster : Actor
{
	//Flags for LookForPlayers() LookExParams argument
	const SAI_SEE_FLAGS = LOF_NOSOUNDCHECK|LOF_NOSEESOUND|LOF_NOJUMP;
	const SAI_HEAR_FLAGS = LOF_NOSIGHTCHECK|LOF_NOSEESOUND|LOF_NOJUMP;

	//Amount of awareness needed to begin searching
	const AWARE_SEARCH = 10.0;
	//Amount of awareness needed to begin attacking
	const AWARE_ATTACK = 40.0;
	//Maximum awareness
	const AWARE_MAX = 80.0;
	//Amount of awareness lost per game tic
	const AWARE_LOSS_TIC = (1.0 / TICRATE);

	//Multiplier to all visual detection
	const VISUAL_MULT = sqrt(20);

	bool params_init, search_last_seen;

	double sight_light_mult, sight_mult, hear_mult, aware, seen_x, seen_y,
		sight_max_dist,	sight_fov, hear_max_dist, last_aware;

	LookExParams look_params;

	property SAIParamsInit : params_init;
	property Awareness : aware;
	property Vision : sight_mult, sight_light_mult, sight_max_dist;
	property Hearing : hear_mult, hear_max_dist;
	property FoV : sight_fov;

	override void Tick()
	{
		//If we're still alive...
		if (health > 0)
		{
			//Track our target while we have one
			if (target && CheckIfTargetInLOS(sight_fov * 0.5, dist_max:
				sight_max_dist))
			{
				search_last_seen = true;
				seen_x = target.pos.x + target.vel.x;
				seen_y = target.pos.y + target.vel.y;
			}
			else
			{
				seen_x += frandom(-1.0,1.0);
				seen_y += frandom(-1.0,1.0);
			}
			
			vector2 seen_vec = (seen_x - pos.x, seen_y - pos.y);
			
			if (search_last_seen && seen_vec.length() < speed)
			{
				A_PlaySound(painsound, CHAN_VOICE);
				search_last_seen = false;
			}
			
			//Save awareness from this tic for checking next tic
			last_aware = aware;
			
			aware = min(AWARE_MAX, aware);
			
			if (aware > AWARE_SEARCH)
				aware = max(AWARE_SEARCH, aware - AWARE_LOSS_TIC);
			else if (aware < AWARE_SEARCH)
				aware = max(0.0, aware - AWARE_LOSS_TIC);
			
			//Jump straight to Search state if awareness drops below attack threshold
			if (aware < AWARE_ATTACK && last_aware >= AWARE_ATTACK)
			{
				SetStateLabel("Search");
			}
		}
		else
			//The dead are aware of nothing.
			aware = 0.0;

		Super.Tick();
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod,
		int flags = 0, double angle = 0)
	{
		//If something hurts the monster, it tends to become highly aware of it.
		aware = AWARE_MAX;
		
		//The monster faces whatever harms it.
		self.Angle = VectorAngle(source.pos.x - pos.x, source.pos.y - pos.y);
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}

	default
	{
		SensoryMonster.SAIParamsInit true;
		SensoryMonster.Awareness 0.0;
		SensoryMonster.Vision 1.0, 1.0, 2048.0;
		SensoryMonster.Hearing 15.0, 8192.0;
		SensoryMonster.FoV 135.0;
	}

	void initLookParams()
	{
		search_last_seen = false;
		look_params.fov = sight_fov;
		look_params.minDist = 0;
		look_params.maxDist = sight_max_dist;
		look_params.maxHearDist = hear_max_dist;
		look_params.seestate = null;
		params_init = false;
	}

	//Linear map function. Map a double from one range of values to another.
	double map(double val, double min1, double max1, double min2, double max2)
	{
		double ratio = (val - min1) / (max1 - min1);
		return ratio * (max2 - min2) + min2;
	}

	//Map a value from one linear range to an exponential one. Maybe.
	double ExpCurve(double val, double min1, double max1, double min2, double max2)
	{
		double linear = map(val, min1, max1, min2, max2);
		return map(val, min1, max1, min2, linear);
	}

	//Map a value from one linear range to a logarithmic one. I think.
	double LogCurve(double val, double min1, double max1, double min2, double max2)
	{
		double linear = map(val, min1, max1, min2, max2);
		return map(val, min1, max1, linear, max2);
	}

	//Get multiplier for detection based on distance.
	double DistMod(double val, double max)
	{
			return LogCurve(val, 0.0, max, 2.0, 0.0);
	}

	//Get multiplier for detection based on light level.
	double LightDetect(double light_amt)
	{
		return ExpCurve(light_amt, 0.0, 256.0, 0.0, VISUAL_MULT);
	}

	//Custom detection function. Detect the player visually/aurally by degrees.
	void DetectPlayers()
	{
		//Visual detection
		look_params.flags = SAI_SEE_FLAGS;
		bool see_check = LookForPlayers(false, look_params);

		//Aural detection
		look_params.flags = SAI_HEAR_FLAGS;
		LookForPlayers(true, look_params);
		
		//If monster has no target but has heard something, that is its target.
		if (!target && LastHeard)
			target = LastHeard;

		//If monster has a target...
		if (target)
		{
			double visual_detection = 0.0;
			double hear_mod = 0.0;
			
			//Distance to target.
			double dist = Distance3D(target);
			
			//If monster saw something earlier...
			if (see_check)
			{
				//Modify sight by distance and monster visual acuity.
				double sight_mod = DistMod(dist, sight_max_dist) *
					sight_mult * VISUAL_MULT;

				//Modify sight by light level and monster dark vision.
				double light_mod = LightDetect(
					target.cursector.GetLightLevel()) * sight_light_mult;
				
				//Final visual detection calculation.
				visual_detection = sight_mod * light_mod;

				aware += visual_detection;
			}
			//If monster heard something earlier...
			if (LastHeard)
			{
				//Modify hearing by distance and monster aural acuity.
				hear_mod = DistMod(dist, hear_max_dist) * hear_mult;
				
				aware += hear_mod;
				
				A_ClearLastHeard();
			}
		}
	}
	
	action void A_SeekPlayer()
	{
		if (!invoker.search_last_seen)
		{
			invoker.A_Wander();
			return;
		}
		
		vector2 delta;
		delta.x = invoker.seen_x - invoker.pos.x;
		delta.y = invoker.seen_y - invoker.pos.y;
		delta = delta.unit() * invoker.speed;
		
		vector2 dest = delta;
		dest.x += invoker.pos.x;
		dest.y += invoker.pos.y;
		
		invoker.angle = VectorAngle(delta.x, delta.y);

		if (!invoker.TryMove(dest, invoker.MaxDropoffHeight))
		{
			vector2 try_ccw;
			vector2 try_cw;
			for (double offset = 5.0; offset < 90.0; offset += 5.0)
			{
				try_ccw = RotateVector(delta, offset);
				try_ccw.x += invoker.pos.x;
				try_ccw.y += invoker.pos.y;
				dest = try_ccw;
				
				invoker.angle = VectorAngle(dest.x - invoker.pos.x, dest.y -
					invoker.pos.y);
					
				if (invoker.TryMove(dest, invoker.MaxDropoffHeight))
					break;
					
				try_cw = RotateVector(delta, -offset);
				try_cw.x += invoker.pos.x;
				try_cw.y += invoker.pos.y;
				dest = try_cw;
				
				invoker.angle = VectorAngle(dest.x - invoker.pos.x, dest.y -
					invoker.pos.y);
				
				if (invoker.TryMove(dest, invoker.MaxDropoffHeight))
					break;
			}
		}
		FLineTraceData doorCheck;
		LineTrace(invoker.angle, 64.0, 0.0, offsetz: height / 2, data:
			doorCheck);
		if (doorCheck.HitType == TRACE_HitWall)
			doorCheck.HitLine.Activate(self, 0, SPAC_Use);
	}

	//Custom A_Look function using DetectPlayers().
	action void A_Sense(StateLabel attack = "See")
	{
		if (invoker.params_init)
			invoker.initLookParams();
		
		//Check monster senses.
		invoker.DetectPlayers();
		//If monster is aware enough to attack...
		if (invoker.aware >= AWARE_ATTACK)
		{
			//If monster only now became aware enough to attack
			if (invoker.last_aware < AWARE_ATTACK)
			{
				//Play monster's "SeeSound" and nudge awareness to prevent
				//sudden loss of interest.
				invoker.A_PlaySound(invoker.seesound, CHAN_VOICE);
				invoker.aware += 1.0;
			}
			//Go to the "attack" state
			invoker.SetStateLabel(attack);
		}
		//Otherwise, if monster is aware enough to search...
		else if (invoker.aware >= AWARE_SEARCH)
		{
			//If monster only now became aware enough to search
			if (invoker.last_aware < AWARE_SEARCH)
				//Nudge awareness to prevent sudden loss of interest.
				invoker.aware += 1.0;
			//Go to the Search state
			invoker.SetStateLabel("Search");
		}
	}

	//Custom action function that combines A_Chase and A_Wander to search for a
	//detected player.
	action void A_Search(StateLabel attack = "See", StateLabel give_up = "Spawn")
	{
		invoker.A_SeekPlayer();

		//Check monster senses.
		invoker.DetectPlayers();
		//If monster is aware enough to attack...
		if (invoker.aware >= AWARE_ATTACK)
		{
			//If monster only now became aware enough to attack
			if (invoker.last_aware < AWARE_ATTACK)
			{
				//Play monster's "SeeSound" and nudge awareness to prevent
				//sudden loss of interest.
				invoker.A_PlaySound(invoker.seesound, CHAN_VOICE);
				invoker.aware += 1.0;
			}
			//Go to the "attack" state
			invoker.SetStateLabel(attack);
		}
		//Otherwise, if monster is no longer aware enough to search...
		else if (invoker.aware < AWARE_SEARCH)
			//Go to the "give_up" state
			invoker.SetStateLabel(give_up);
	}
}